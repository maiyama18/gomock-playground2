// Code generated by MockGen. DO NOT EDIT.
// Source: person.go

// Package mockrepository is a generated GoMock package.
package mockrepository

import (
	gomock "github.com/golang/mock/gomock"
	model "github.com/maiyama18/gomock-playground2/model"
	reflect "reflect"
)

// MockPersonRepository is a mock of PersonRepository interface
type MockPersonRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPersonRepositoryMockRecorder
}

// MockPersonRepositoryMockRecorder is the mock recorder for MockPersonRepository
type MockPersonRepositoryMockRecorder struct {
	mock *MockPersonRepository
}

// NewMockPersonRepository creates a new mock instance
func NewMockPersonRepository(ctrl *gomock.Controller) *MockPersonRepository {
	mock := &MockPersonRepository{ctrl: ctrl}
	mock.recorder = &MockPersonRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPersonRepository) EXPECT() *MockPersonRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockPersonRepository) Find(id uint64) (*model.Person, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", id)
	ret0, _ := ret[0].(*model.Person)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockPersonRepositoryMockRecorder) Find(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockPersonRepository)(nil).Find), id)
}

// Save mocks base method
func (m *MockPersonRepository) Save(person *model.Person) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", person)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockPersonRepositoryMockRecorder) Save(person interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockPersonRepository)(nil).Save), person)
}
